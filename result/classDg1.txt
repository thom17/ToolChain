@startuml
/'do Class Define (클래스 정의)'/
class complexity.Complex 
{
	int line
	int score
	java.lang.StringBuilder undefSize
	java.util.Map<java.lang.String, java.lang.String> memberScore
	new Complex(dataSet.Function);
	new Complex(dataSet.Class);
	int getScore();
	int getLine();
	String getUndefSize();
	Map<String, String> getMemberScoreMap();
	void simpleMake(dataSet.Class);
	void addFunctionScore(dataSet.Class);
	void simpleMake(dataSet.Function);
	int getMemberScore(dataSet.Data_base);
	void getLineNum(dataSet.Function);
}

class java.util.null 
{
	new java.util.ArrayList.ArrayList();
}

class dataSet.Class 
{
	boolean isimplement
	dataSet.Class[] extendClass
	dataSet.Class[] implementClass
	java.lang.String[] extendSrcName
	java.lang.String[] implementSrcName
	java.lang.String packageSrc
	boolean isLib
	boolean isInterface
	complexity.Complex complex
	new Class(java.lang.String);
	new Class(java.lang.String, java.lang.String);
	String getSrcName();
	void setImplementSrcName(java.lang.String[]);
	void setExtendSrcName(java.lang.String[]);
	void setExtendClass(dataSet.Class[]);
	void setImplementClass(dataSet.Class[]);
	void setInterface(boolean);
	boolean isimplement();
	boolean isInterface();
	Class[] getSuperClass();
	String getPackageName();
	void setIsInterface(boolean);
	Complex getComplex();
	void addCallBy(dataSet.Data_base);
	void addCall(dataSet.Data_base);
	void addHas(dataSet.Data_base);
	void setComplex();
}

abstract dataSet.Data_base 
{
	java.lang.String name
	java.lang.String modifier
	dataSet.DataList hasList
	dataSet.DataList callList
	dataSet.DataList callByList
	boolean isAbstract
	boolean isStatic
	void setStatic(boolean);
	void setAbstract(boolean);
	void setModfi(java.lang.String);
	boolean isAbstract();
	String getModifier();
	String getName();
	DataList getCallList();
	DataList getHasList();
	DataList getCallByList();
	void main(java.lang.String[]);
	String getPackageName();
	String getSrcName();
	void addCallBy(dataSet.Data_base);
	void addCall(dataSet.Data_base);
	void addHas(dataSet.Data_base);
	Complex getComplex();
}

class dataSet.DataList 
{
	java.util.Map<java.lang.String, dataSet.Class> classList
	java.util.Map<java.lang.String, dataSet.Function> functionList
	java.util.Map<java.lang.String, dataSet.Member> memberList
	void addData(dataSet.Data_base);
	Class findClass(java.lang.String);
	Function findFunction(java.lang.String);
	Member findMember(java.lang.String);
	ArrayList<Class> getClassList();
	ArrayList<Function> getFunctionList();
	ArrayList<Member> getMemberList();
	HashMap<String, Class> getClassMap();
	HashMap<String, Function> getFunctionMap();
	boolean checkOtherClassCall(dataSet.Class);
	Map<String, ArrayList<Class>> separatePackage();
	void main(java.lang.String[]);
	new dataSet.DataList.DataList();
}

class dataSet.Function 
{
	boolean isStatic
	dataSet.Data_base owner
	java.lang.String returnType
	java.lang.String sig
	java.lang.String[] parameterType
	java.lang.String[] parameterName
	java.lang.String code
	dataSet.stateNode.StateNode headNode
	complexity.Complex complex
	void setCode(java.lang.String);
	String getCode();
	new Function(java.lang.String, dataSet.Class);
	new Function(java.lang.String, java.lang.String, dataSet.Data_base);
	void setHeadNode(dataSet.stateNode.StateNode);
	void setInit(java.lang.String, java.lang.String);
	String getSrcName();
	String getParameterName();
	void setParameter(java.lang.String[], java.lang.String[]);
	StateNode getHeadNode();
	Data_base getOwner();
	String getSig();
	String getTypeName();
	String[] getParameterTypeList();
	String[] getParameterNameList();
	Complex getComplex();
	String getPackageName();
	void addHas(dataSet.Data_base);
	void addCallBy(dataSet.Data_base);
	void addCall(dataSet.Data_base);
	void setName(java.lang.String);
	void setComplex();
}

class dataSet.stateNode.StateNode 
{
	int id
	java.lang.String code
	java.lang.String nextCheck
	java.lang.String key
	dataSet.stateNode.StateNode thenNode
	dataSet.stateNode.StateNode elseNode
	dataSet.stateNode.StateNode before
	new StateNode(java.lang.String);
	new StateNode(java.lang.String, java.lang.String);
	new StateNode(java.lang.String, java.lang.String, java.lang.String);
	new StateNode();
	void setBefore(dataSet.stateNode.StateNode);
	StateNode init(java.lang.String, java.lang.String, java.lang.String);
	StateNode init(java.lang.String, java.lang.String, java.lang.String, dataSet.stateNode.StateNode);
	StateNode getThen();
	StateNode getElse();
	StateNode setThen(dataSet.stateNode.StateNode);
	StateNode setElse(dataSet.stateNode.StateNode);
	StateNode getBefore();
	String getCondition();
	String getKey();
	String getCode();
}

class dataSet.Member 
{
	dataSet.Data_base owner
	java.util.ArrayList<java.lang.String> imageList
	dataSet.Data_base typedef
	java.lang.String typeName
	boolean superMember
	new Member(java.lang.String);
	new Member(java.lang.String, java.lang.String);
	new Member(java.lang.String, dataSet.Class);
	new Member(java.lang.String, java.lang.String, dataSet.Data_base);
	void addHas(dataSet.Data_base);
	void addCallBy(dataSet.Data_base);
	void addCall(dataSet.Data_base);
	int getMemberScore(dataSet.Member);
	void setSuperMember();
	boolean isSuperMember();
	ArrayList<String> getImageList();
	void addImage(java.lang.String);
	String getTypeName();
	String getSrcName();
	Data_base getOwner();
	String getPackageName();
	Complex getComplex();
}

class dataSet.stateNode.ForStateNode 
{
	java.util.List init
	java.util.ArrayList<org.eclipse.jdt.core.dom.Statement> bodyList
	java.lang.String repeatCondition
	dataSet.stateNode.StateNode cond
	dataSet.stateNode.StateNode condElseNode
	java.util.ArrayList<dataSet.stateNode.StateNode> forFinList
	new ForStateNode(org.eclipse.jdt.core.dom.ForStatement);
	void setCond(dataSet.stateNode.StateNode);
	void setForFin(java.util.ArrayList<dataSet.stateNode.StateNode>);
	void setCondElseNode(dataSet.stateNode.StateNode);
	String getForLine();
	StateNode getCondNode();
	ArrayList<StateNode> getForFinList();
	List getInitList();
	StateNode getCond();
	StateNode getLastFin();
}

class dataSet.stateNode.SwitchNode 
{
	java.util.Map<java.lang.String, java.util.ArrayList<org.eclipse.jdt.core.dom.Statement>> caseMap
	java.lang.String target
	new SwitchNode(org.eclipse.jdt.core.dom.SwitchStatement);
	Map<String, ArrayList<Statement>> getCaseMap();
	String getTarget();
	void print();
}

class dataSet.stateNode.VarDecNode 
{
	java.lang.String type
	void setType(java.lang.String);
	new dataSet.stateNode.VarDecNode.VarDecNode();
}

class diagram.ForEx 
{
	java.util.Map<java.lang.String, java.util.ArrayList<dataSet.Class>> separateMap
	java.lang.String[] skipKey
	int packageNum
	int classNum
	int funNum
	java.lang.StringBuilder sb
	void print(dataSet.DataList);
	void main(dataSet.DataList);
	void makeFile(java.lang.String, java.lang.String);
	void packageMake(java.lang.String, java.lang.String);
	void classMake(dataSet.Class, java.lang.String);
	void funMake(dataSet.Function, java.lang.String);
	int sizeMake(dataSet.Data_base, java.lang.String, java.lang.String);
	void stateMake(dataSet.stateNode.StateNode, java.lang.String);
	void stateParsing(dataSet.stateNode.StateNode, java.lang.String, java.lang.String, boolean);
	boolean checkIn(java.lang.String, java.lang.String[]);
	String switchNodeStateMake(dataSet.stateNode.StateNode, java.lang.String, java.lang.String);
	StateNode forNodeMake(dataSet.stateNode.StateNode, java.lang.String, java.lang.String);
}

class diagram.ForQuiz4 
{
	java.lang.String[] skipMember
	java.lang.String[] skipClass
	java.lang.String[] skipKey
	int funNum
	java.util.ArrayList<dataSet.stateNode.StateNode> nodelist
	void main(java.lang.String[]);
	void main(dataSet.DataList);
	void makeFile(java.lang.String, java.lang.String);
	boolean checkSkipList(java.lang.String, java.lang.String[]);
	String makeScript(dataSet.DataList);
	void makeMemberInfo(dataSet.Class, java.lang.StringBuilder);
	void makeFunctionInfo(dataSet.Class, java.lang.StringBuilder);
	String getColor(dataSet.stateNode.StateNode);
	StateNode nextThen(java.lang.String[], dataSet.stateNode.StateNode);
	StateNode nextElse(java.lang.String[], dataSet.stateNode.StateNode);
	void makeExpInfo(dataSet.stateNode.StateNode, java.lang.StringBuilder);
}

class diagram.NodeClassDg 
{
	java.lang.StringBuilder sb
	int num
	java.util.ArrayList<dataSet.stateNode.StateNode> nodelist
	void main(dataSet.Function);
	void makeFile(java.lang.String, java.lang.String);
	boolean checkSkipList(java.lang.String, java.lang.String[]);
	String makeScript(dataSet.Function);
	void stateNodeParsing(dataSet.stateNode.StateNode, java.lang.String);
	void switchNodeInfo(dataSet.stateNode.StateNode, java.lang.String);
	void stateNodeInfo(dataSet.stateNode.StateNode, java.lang.String);
	String getId(dataSet.stateNode.StateNode);
}

class hongik.selab.parser.java.JavaParser 
{
	org.eclipse.jdt.core.dom.ASTParser parser
	org.eclipse.jdt.core.dom.CompilationUnit compilationUnit
	java.util.ArrayList<java.io.File> targetList
	java.io.File settingFile
	int fileNum
	CompilationUnit[] makeASTList(java.lang.String);
	boolean isJavaFile(java.io.File);
	void makeFileList(java.io.File);
	void init(java.io.File);
	CompilationUnit parsing();
	void main(java.lang.String[]);
}

class org.eclipse.jdt.core.dom.ASTParser 
{
	null newParser(int);
	null setKind(int);
	null setSource(char[]);
	null setStatementsRecovery(boolean);
	null setBindingsRecovery(boolean);
	null setResolveBindings(boolean);
	null setCompilerOptions(java.util.Map);
}

class org.eclipse.jdt.core.dom.CompilationUnit 
{
	null getPackage();
	null types();
}

abstract main.Base_Visitor 
{
}

class main.DataListDiagram 
{
	java.lang.String[] skipList
	void main(java.lang.String[]);
	void main(dataSet.DataList);
	void makeFile(java.lang.String, java.lang.String);
	String makeClassScript(dataSet.DataList);
	String makeFunctionScript(dataSet.DataList);
	void classExtends(dataSet.DataList, java.lang.StringBuilder);
	boolean is_skip_package(java.lang.String[], java.lang.String);
	void classDef(dataSet.Data_base, java.lang.StringBuilder, java.lang.String);
	void addList(dataSet.DataList, java.lang.StringBuilder);
	void functionDef(dataSet.Function, java.lang.StringBuilder);
}

class main.Main 
{
	void main(java.lang.String[]);
}

class main.MethodVisitor 
{
	new MethodVisitor(dataSet.Function);
}

class main.Test_Visitor 
{
	java.lang.String packageName
	dataSet.DataList datalist
	dataSet.stateNode.StateNode stateNode
	void addDataList(org.eclipse.jdt.core.dom.CompilationUnit, dataSet.DataList);
	ArrayList<Statement> getStmtList(org.eclipse.jdt.core.dom.Statement);
	void typeDeclaration(org.eclipse.jdt.core.dom.AbstractTypeDeclaration);
	void fieldDeclaration(org.eclipse.jdt.core.dom.FieldDeclaration, dataSet.Data_base);
	Function makeFunction(org.eclipse.jdt.core.dom.MethodDeclaration, dataSet.Data_base);
	void methodDeclaration(org.eclipse.jdt.core.dom.MethodDeclaration, dataSet.Data_base);
	void stmtParsing(org.eclipse.jdt.core.dom.Statement, dataSet.Function);
	void returnStatement(org.eclipse.jdt.core.dom.Statement, dataSet.Function);
	void forStatement(org.eclipse.jdt.core.dom.Statement, dataSet.Function);
	void ifStatement(org.eclipse.jdt.core.dom.Statement, dataSet.Function);
	void expressionStatement(org.eclipse.jdt.core.dom.Statement, dataSet.Function);
	void assignment(org.eclipse.jdt.core.dom.Expression, dataSet.Function);
	void variableDeclarationStatement(org.eclipse.jdt.core.dom.Statement, dataSet.Function);
	void switchStatement(org.eclipse.jdt.core.dom.Statement, dataSet.Function);
}

class java.util.Scanner 
{
	null nextLine();
}

class java.util.ArrayList 
{
	null add(E);
	null size();
	null get(int);
}

class org.eclipse.jdt.core.JavaCore 
{
	null getOptions();
	null setComplianceOptions(java.lang.String, java.util.Map);
}

class org.eclipse.jdt.core.dom.Name 
{
	null getFullyQualifiedName();
}

class org.eclipse.jdt.core.dom.Block 
{
	null statements();
}

class org.eclipse.jdt.core.dom.ASTNode 
{
	null toString();
}

class org.eclipse.jdt.core.dom.TypeDeclaration 
{
	null getMethods();
	null getFields();
}

class org.eclipse.jdt.core.dom.FieldDeclaration 
{
	null getType();
}

class org.eclipse.jdt.core.dom.SimpleName 
{
	null getIdentifier();
}

class org.eclipse.jdt.core.dom.VariableDeclaration 
{
	null getInitializer();
}

class org.eclipse.jdt.core.dom.MethodDeclaration 
{
	null parameters();
	null getReturnType2();
	null getBody();
}

class org.eclipse.jdt.core.dom.ForStatement 
{
	null getExpression();
	null initializers();
	null updaters();
}

class org.eclipse.jdt.core.dom.ExpressionStatement 
{
	null getExpression();
}

class org.eclipse.jdt.core.dom.VariableDeclarationStatement 
{
	null fragments();
	null getType();
}

/'Class Define (클래스 정의) end'/

/'do Extends Define (상속 관계 정의)'/
	dataSet.Class-->dataSet.Data_base: dataSet.Class is dataSet.Data_base
	dataSet.Function-->dataSet.Data_base: dataSet.Function is dataSet.Data_base
	dataSet.Member-->dataSet.Data_base: dataSet.Member is dataSet.Data_base
	dataSet.stateNode.ForStateNode-->dataSet.stateNode.StateNode: dataSet.stateNode.ForStateNode is dataSet.stateNode.StateNode
	dataSet.stateNode.SwitchNode-->dataSet.stateNode.StateNode: dataSet.stateNode.SwitchNode is dataSet.stateNode.StateNode
	dataSet.stateNode.VarDecNode-->dataSet.stateNode.StateNode: dataSet.stateNode.VarDecNode is dataSet.stateNode.StateNode
	main.MethodVisitor-->main.Test_Visitor: main.MethodVisitor is main.Test_Visitor
/'Extends Define (상속 관계 정의) end'/

/'do call By Define-Class (클래스-클래스 호출 관계 정의)'/
	complexity.Complex -- dataSet.Function : ref dataSet.Function
	complexity.Complex -- dataSet.Class : ref dataSet.Class
	complexity.Complex -- dataSet.Data_base : ref dataSet.Data_base
	complexity.Complex -- complexity.Complex : ref complexity.Complex
	complexity.Complex -- dataSet.DataList : ref dataSet.DataList
	complexity.Complex o-- java.util.null : has java.util.null
	complexity.Complex -- java.util.Scanner : ref java.util.Scanner
	dataSet.Class o-- dataSet.Class : has dataSet.Class
	dataSet.Class -- dataSet.Data_base : ref dataSet.Data_base
	dataSet.Class -- dataSet.DataList : ref dataSet.DataList
	dataSet.Class o-- complexity.Complex : has complexity.Complex
	dataSet.Data_base -- dataSet.Data_base : ref dataSet.Data_base
	dataSet.DataList -- dataSet.Data_base : ref dataSet.Data_base
	dataSet.DataList -- dataSet.Class : ref dataSet.Class
	dataSet.DataList o-- java.util.null : has java.util.null
	dataSet.Function -- dataSet.Class : ref dataSet.Class
	dataSet.Function o-- dataSet.Data_base : has dataSet.Data_base
	dataSet.Function o-- dataSet.stateNode.StateNode : has dataSet.stateNode.StateNode
	dataSet.Function o-- complexity.Complex : has complexity.Complex
	dataSet.Function -- dataSet.DataList : ref dataSet.DataList
	dataSet.stateNode.StateNode o-- dataSet.stateNode.StateNode : has dataSet.stateNode.StateNode
	dataSet.Member -- dataSet.Class : ref dataSet.Class
	dataSet.Member o-- dataSet.Data_base : has dataSet.Data_base
	dataSet.Member -- dataSet.Member : ref dataSet.Member
	dataSet.Member -- dataSet.DataList : ref dataSet.DataList
	dataSet.Member -- java.util.ArrayList : ref java.util.ArrayList
	dataSet.stateNode.ForStateNode -- org.eclipse.jdt.core.dom.ForStatement : ref org.eclipse.jdt.core.dom.ForStatement
	dataSet.stateNode.ForStateNode o-- dataSet.stateNode.StateNode : has dataSet.stateNode.StateNode
	dataSet.stateNode.ForStateNode o-- java.util.null : has java.util.null
	dataSet.stateNode.ForStateNode -- java.util.ArrayList : ref java.util.ArrayList
	dataSet.stateNode.SwitchNode -- org.eclipse.jdt.core.dom.SwitchStatement : ref org.eclipse.jdt.core.dom.SwitchStatement
	diagram.ForEx -- dataSet.DataList : ref dataSet.DataList
	diagram.ForEx -- dataSet.Class : ref dataSet.Class
	diagram.ForEx -- dataSet.Function : ref dataSet.Function
	diagram.ForEx -- dataSet.Data_base : ref dataSet.Data_base
	diagram.ForEx -- dataSet.stateNode.StateNode : ref dataSet.stateNode.StateNode
	diagram.ForEx -- diagram.ForEx : ref diagram.ForEx
	diagram.ForEx -- complexity.Complex : ref complexity.Complex
	diagram.ForEx o-- java.util.null : has java.util.null
	diagram.ForEx -- java.util.ArrayList : ref java.util.ArrayList
	diagram.ForEx -- dataSet.stateNode.SwitchNode : ref dataSet.stateNode.SwitchNode
	diagram.ForQuiz4 -- dataSet.DataList : ref dataSet.DataList
	diagram.ForQuiz4 -- dataSet.Class : ref dataSet.Class
	diagram.ForQuiz4 -- dataSet.stateNode.StateNode : ref dataSet.stateNode.StateNode
	diagram.ForQuiz4 o-- java.util.null : has java.util.null
	diagram.ForQuiz4 -- diagram.ForQuiz4 : ref diagram.ForQuiz4
	diagram.ForQuiz4 -- java.util.ArrayList : ref java.util.ArrayList
	diagram.NodeClassDg -- dataSet.Function : ref dataSet.Function
	diagram.NodeClassDg -- dataSet.stateNode.StateNode : ref dataSet.stateNode.StateNode
	diagram.NodeClassDg o-- java.util.null : has java.util.null
	diagram.NodeClassDg -- diagram.NodeClassDg : ref diagram.NodeClassDg
	diagram.NodeClassDg -- java.util.ArrayList : ref java.util.ArrayList
	diagram.NodeClassDg -- dataSet.stateNode.SwitchNode : ref dataSet.stateNode.SwitchNode
	hongik.selab.parser.java.JavaParser o-- java.util.null : has java.util.null
	hongik.selab.parser.java.JavaParser -- hongik.selab.parser.java.JavaParser : ref hongik.selab.parser.java.JavaParser
	hongik.selab.parser.java.JavaParser -- java.util.ArrayList : ref java.util.ArrayList
	hongik.selab.parser.java.JavaParser *-- org.eclipse.jdt.core.dom.ASTParser : has(Composition) org.eclipse.jdt.core.dom.ASTParser
	hongik.selab.parser.java.JavaParser -- org.eclipse.jdt.core.JavaCore : ref org.eclipse.jdt.core.JavaCore
	main.DataListDiagram -- dataSet.DataList : ref dataSet.DataList
	main.DataListDiagram -- dataSet.Data_base : ref dataSet.Data_base
	main.DataListDiagram -- dataSet.Function : ref dataSet.Function
	main.DataListDiagram -- main.DataListDiagram : ref main.DataListDiagram
	main.DataListDiagram -- dataSet.Class : ref dataSet.Class
	main.Main -- hongik.selab.parser.java.JavaParser : ref hongik.selab.parser.java.JavaParser
	main.Main -- dataSet.DataList : ref dataSet.DataList
	main.Main -- diagram.ForEx : ref diagram.ForEx
	main.MethodVisitor -- dataSet.Function : ref dataSet.Function
	main.Test_Visitor -- org.eclipse.jdt.core.dom.CompilationUnit : ref org.eclipse.jdt.core.dom.CompilationUnit
	main.Test_Visitor o-- dataSet.DataList : has dataSet.DataList
	main.Test_Visitor -- org.eclipse.jdt.core.dom.Statement : ref org.eclipse.jdt.core.dom.Statement
	main.Test_Visitor -- org.eclipse.jdt.core.dom.AbstractTypeDeclaration : ref org.eclipse.jdt.core.dom.AbstractTypeDeclaration
	main.Test_Visitor -- org.eclipse.jdt.core.dom.FieldDeclaration : ref org.eclipse.jdt.core.dom.FieldDeclaration
	main.Test_Visitor -- dataSet.Data_base : ref dataSet.Data_base
	main.Test_Visitor -- org.eclipse.jdt.core.dom.MethodDeclaration : ref org.eclipse.jdt.core.dom.MethodDeclaration
	main.Test_Visitor -- dataSet.Function : ref dataSet.Function
	main.Test_Visitor -- org.eclipse.jdt.core.dom.Expression : ref org.eclipse.jdt.core.dom.Expression
	main.Test_Visitor -- org.eclipse.jdt.core.dom.Name : ref org.eclipse.jdt.core.dom.Name
	main.Test_Visitor -- java.util.null : ref java.util.null
	main.Test_Visitor -- org.eclipse.jdt.core.dom.Block : ref org.eclipse.jdt.core.dom.Block
	main.Test_Visitor -- java.util.ArrayList : ref java.util.ArrayList
	main.Test_Visitor -- org.eclipse.jdt.core.dom.ASTNode : ref org.eclipse.jdt.core.dom.ASTNode
	main.Test_Visitor -- dataSet.Class : ref dataSet.Class
	main.Test_Visitor -- org.eclipse.jdt.core.dom.TypeDeclaration : ref org.eclipse.jdt.core.dom.TypeDeclaration
	main.Test_Visitor -- org.eclipse.jdt.core.dom.SimpleName : ref org.eclipse.jdt.core.dom.SimpleName
	main.Test_Visitor -- dataSet.Member : ref dataSet.Member
	main.Test_Visitor -- org.eclipse.jdt.core.dom.VariableDeclaration : ref org.eclipse.jdt.core.dom.VariableDeclaration
	main.Test_Visitor o-- dataSet.stateNode.StateNode : has dataSet.stateNode.StateNode
	main.Test_Visitor -- main.Test_Visitor : ref main.Test_Visitor
	main.Test_Visitor -- dataSet.stateNode.ForStateNode : ref dataSet.stateNode.ForStateNode
	main.Test_Visitor -- org.eclipse.jdt.core.dom.ForStatement : ref org.eclipse.jdt.core.dom.ForStatement
	main.Test_Visitor -- org.eclipse.jdt.core.dom.ExpressionStatement : ref org.eclipse.jdt.core.dom.ExpressionStatement
	main.Test_Visitor -- org.eclipse.jdt.core.dom.VariableDeclarationStatement : ref org.eclipse.jdt.core.dom.VariableDeclarationStatement
	main.Test_Visitor -- dataSet.stateNode.VarDecNode : ref dataSet.stateNode.VarDecNode
	main.Test_Visitor -- dataSet.stateNode.SwitchNode : ref dataSet.stateNode.SwitchNode


/'call By Define-Class (클래스-클래스 호출 관계 정의)' end/


@enduml