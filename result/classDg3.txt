@startuml
/'do Class Define (클래스 정의)'/
class complexity.Complex  
{
	int line
	int score
	java.lang.StringBuilder undefSize
	java.util.Map<java.lang.String, java.lang.String> memberScore
	new Complex(dataSet.Function);
	new Complex(dataSet.Class);
	int getScore();
	int getLine();
	String getUndefSize();
	Map<String, String> getMemberScoreMap();
	void simpleMake(dataSet.Class);
	void addFunctionScore(dataSet.Class);
	void simpleMake(dataSet.Function);
	int getMemberScore(dataSet.Data_base);
	void getLineNum(dataSet.Function);
}

class java.util.null #line:green 
{
	new java.util.ArrayList.ArrayList();
}

class dataSet.Class #line:green 
{
	boolean isimplement
	dataSet.Class[] extendClass
	dataSet.Class[] implementClass
	java.lang.String[] extendSrcName
	java.lang.String[] implementSrcName
	java.lang.String packageSrc
	boolean isLib
	boolean isInterface
	complexity.Complex complex
	new Class(java.lang.String);
	new Class(java.lang.String, java.lang.String);
	String getSrcName();
	void setImplementSrcName(java.lang.String[]);
	void setExtendSrcName(java.lang.String[]);
	void setExtendClass(dataSet.Class[]);
	void setImplementClass(dataSet.Class[]);
	void setInterface(boolean);
	boolean isimplement();
	boolean isInterface();
	Class[] getSuperClass();
	String getPackageName();
	void setIsInterface(boolean);
	Complex getComplex();
	void addCallBy(dataSet.Data_base);
	void addCall(dataSet.Data_base);
	void addHas(dataSet.Data_base);
	void setComplex();
}

abstract dataSet.Data_base #line:green 
{
	java.lang.String name
	java.lang.String modifier
	dataSet.DataList hasList
	dataSet.DataList callList
	dataSet.DataList callByList
	boolean isAbstract
	boolean isStatic
	void setStatic(boolean);
	void setAbstract(boolean);
	void setModfi(java.lang.String);
	boolean isAbstract();
	String getModifier();
	String getName();
	DataList getCallList();
	DataList getHasList();
	DataList getCallByList();
	void main(java.lang.String[]);
	String getPackageName();
	String getSrcName();
	void addCallBy(dataSet.Data_base);
	void addCall(dataSet.Data_base);
	void addHas(dataSet.Data_base);
	Complex getComplex();
}

class dataSet.DataList #line:green 
{
	java.util.Map<java.lang.String, dataSet.Class> classList
	java.util.Map<java.lang.String, dataSet.Function> functionList
	java.util.Map<java.lang.String, dataSet.Member> memberList
	void addData(dataSet.Data_base);
	Class findClass(java.lang.String);
	Function findFunction(java.lang.String);
	Member findMember(java.lang.String);
	ArrayList<Class> getClassList();
	ArrayList<Function> getFunctionList();
	ArrayList<Member> getMemberList();
	HashMap<String, Class> getClassMap();
	HashMap<String, Function> getFunctionMap();
	boolean checkOtherClassCall(dataSet.Class);
	Map<String, ArrayList<Class>> separatePackage();
	void main(java.lang.String[]);
	new dataSet.DataList.DataList();
}

class dataSet.Function #line:green 
{
	boolean isStatic
	dataSet.Data_base owner
	java.lang.String returnType
	java.lang.String sig
	java.lang.String[] parameterType
	java.lang.String[] parameterName
	java.lang.String code
	dataSet.stateNode.StateNode headNode
	complexity.Complex complex
	void setCode(java.lang.String);
	String getCode();
	new Function(java.lang.String, dataSet.Class);
	new Function(java.lang.String, java.lang.String, dataSet.Data_base);
	void setHeadNode(dataSet.stateNode.StateNode);
	void setInit(java.lang.String, java.lang.String);
	String getSrcName();
	String getParameterName();
	void setParameter(java.lang.String[], java.lang.String[]);
	StateNode getHeadNode();
	Data_base getOwner();
	String getSig();
	String getTypeName();
	String[] getParameterTypeList();
	String[] getParameterNameList();
	Complex getComplex();
	String getPackageName();
	void addHas(dataSet.Data_base);
	void addCallBy(dataSet.Data_base);
	void addCall(dataSet.Data_base);
	void setName(java.lang.String);
	void setComplex();
}

class dataSet.stateNode.StateNode #line:green 
{
	int id
	java.lang.String code
	java.lang.String nextCheck
	java.lang.String key
	dataSet.stateNode.StateNode thenNode
	dataSet.stateNode.StateNode elseNode
	dataSet.stateNode.StateNode before
	new StateNode(java.lang.String);
	new StateNode(java.lang.String, java.lang.String);
	new StateNode(java.lang.String, java.lang.String, java.lang.String);
	new StateNode();
	void setBefore(dataSet.stateNode.StateNode);
	StateNode init(java.lang.String, java.lang.String, java.lang.String);
	StateNode init(java.lang.String, java.lang.String, java.lang.String, dataSet.stateNode.StateNode);
	StateNode getThen();
	StateNode getElse();
	StateNode setThen(dataSet.stateNode.StateNode);
	StateNode setElse(dataSet.stateNode.StateNode);
	StateNode getBefore();
	String getCondition();
	String getKey();
	String getCode();
}

class dataSet.Member #line:green 
{
	dataSet.Data_base owner
	java.util.ArrayList<java.lang.String> imageList
	dataSet.Data_base typedef
	java.lang.String typeName
	boolean superMember
	new Member(java.lang.String);
	new Member(java.lang.String, java.lang.String);
	new Member(java.lang.String, dataSet.Class);
	new Member(java.lang.String, java.lang.String, dataSet.Data_base);
	void addHas(dataSet.Data_base);
	void addCallBy(dataSet.Data_base);
	void addCall(dataSet.Data_base);
	int getMemberScore(dataSet.Member);
	void setSuperMember();
	boolean isSuperMember();
	ArrayList<String> getImageList();
	void addImage(java.lang.String);
	String getTypeName();
	String getSrcName();
	Data_base getOwner();
	String getPackageName();
	Complex getComplex();
}

class dataSet.stateNode.ForStateNode  
{
	java.util.List init
	java.util.ArrayList<org.eclipse.jdt.core.dom.Statement> bodyList
	java.lang.String repeatCondition
	dataSet.stateNode.StateNode cond
	dataSet.stateNode.StateNode condElseNode
	java.util.ArrayList<dataSet.stateNode.StateNode> forFinList
	new ForStateNode(org.eclipse.jdt.core.dom.ForStatement);
	void setCond(dataSet.stateNode.StateNode);
	void setForFin(java.util.ArrayList<dataSet.stateNode.StateNode>);
	void setCondElseNode(dataSet.stateNode.StateNode);
	String getForLine();
	StateNode getCondNode();
	ArrayList<StateNode> getForFinList();
	List getInitList();
	StateNode getCond();
	StateNode getLastFin();
}

class dataSet.stateNode.SwitchNode #line:green 
{
	java.util.Map<java.lang.String, java.util.ArrayList<org.eclipse.jdt.core.dom.Statement>> caseMap
	java.lang.String target
	new SwitchNode(org.eclipse.jdt.core.dom.SwitchStatement);
	Map<String, ArrayList<Statement>> getCaseMap();
	String getTarget();
	void print();
}

class dataSet.stateNode.VarDecNode #line:green 
{
	java.lang.String type
	void setType(java.lang.String);
	new dataSet.stateNode.VarDecNode.VarDecNode();
}

class diagram.ForEx #back:salmon 
{
	java.util.Map<java.lang.String, java.util.ArrayList<dataSet.Class>> separateMap
	java.lang.String[] skipKey
	int packageNum
	int classNum
	int funNum
	java.lang.StringBuilder sb
	void print(dataSet.DataList);
	void main(dataSet.DataList);
	void makeFile(java.lang.String, java.lang.String);
	void packageMake(java.lang.String, java.lang.String);
	void classMake(dataSet.Class, java.lang.String);
	void funMake(dataSet.Function, java.lang.String);
	int sizeMake(dataSet.Data_base, java.lang.String, java.lang.String);
	void stateMake(dataSet.stateNode.StateNode, java.lang.String);
	void stateParsing(dataSet.stateNode.StateNode, java.lang.String, java.lang.String, boolean);
	boolean checkIn(java.lang.String, java.lang.String[]);
	String switchNodeStateMake(dataSet.stateNode.StateNode, java.lang.String, java.lang.String);
	StateNode forNodeMake(dataSet.stateNode.StateNode, java.lang.String, java.lang.String);
}

class diagram.ForQuiz4 #back:salmon 
{
	java.lang.String[] skipMember
	java.lang.String[] skipClass
	java.lang.String[] skipKey
	int funNum
	java.util.ArrayList<dataSet.stateNode.StateNode> nodelist
	void main(java.lang.String[]);
	void main(dataSet.DataList);
	void makeFile(java.lang.String, java.lang.String);
	boolean checkSkipList(java.lang.String, java.lang.String[]);
	String makeScript(dataSet.DataList);
	void makeMemberInfo(dataSet.Class, java.lang.StringBuilder);
	void makeFunctionInfo(dataSet.Class, java.lang.StringBuilder);
	String getColor(dataSet.stateNode.StateNode);
	StateNode nextThen(java.lang.String[], dataSet.stateNode.StateNode);
	StateNode nextElse(java.lang.String[], dataSet.stateNode.StateNode);
	void makeExpInfo(dataSet.stateNode.StateNode, java.lang.StringBuilder);
}

class diagram.NodeClassDg #back:salmon 
{
	java.lang.StringBuilder sb
	int num
	java.util.ArrayList<dataSet.stateNode.StateNode> nodelist
	void main(dataSet.Function);
	void makeFile(java.lang.String, java.lang.String);
	boolean checkSkipList(java.lang.String, java.lang.String[]);
	String makeScript(dataSet.Function);
	void stateNodeParsing(dataSet.stateNode.StateNode, java.lang.String);
	void switchNodeInfo(dataSet.stateNode.StateNode, java.lang.String);
	void stateNodeInfo(dataSet.stateNode.StateNode, java.lang.String);
	String getId(dataSet.stateNode.StateNode);
}

class hongik.selab.parser.java.JavaParser #back:salmon 
{
	org.eclipse.jdt.core.dom.ASTParser parser
	org.eclipse.jdt.core.dom.CompilationUnit compilationUnit
	java.util.ArrayList<java.io.File> targetList
	java.io.File settingFile
	int fileNum
	CompilationUnit[] makeASTList(java.lang.String);
	boolean isJavaFile(java.io.File);
	void makeFileList(java.io.File);
	void init(java.io.File);
	CompilationUnit parsing();
	void main(java.lang.String[]);
}

class org.eclipse.jdt.core.dom.ASTParser #line:green 
{
	null newParser(int);
	null setKind(int);
	null setSource(char[]);
	null setStatementsRecovery(boolean);
	null setBindingsRecovery(boolean);
	null setResolveBindings(boolean);
	null setCompilerOptions(java.util.Map);
}

class org.eclipse.jdt.core.dom.CompilationUnit #line:green 
{
	null getPackage();
	null types();
}

abstract main.Base_Visitor #line:green 
{
}

class main.DataListDiagram #back:salmon 
{
	java.lang.String[] skipList
	void main(java.lang.String[]);
	void main(dataSet.DataList);
	void makeFile(java.lang.String, java.lang.String);
	String makeClassScript(dataSet.DataList);
	String makeFunctionScript(dataSet.DataList);
	void classExtends(dataSet.DataList, java.lang.StringBuilder);
	boolean is_skip_package(java.lang.String[], java.lang.String);
	void classDef(dataSet.Data_base, java.lang.StringBuilder, java.lang.String);
	void addList(dataSet.DataList, java.lang.StringBuilder);
	void functionDef(dataSet.Function, java.lang.StringBuilder);
}

class main.Main #back:salmon 
{
	void main(java.lang.String[]);
}

class main.MethodVisitor #back:salmon 
{
	new MethodVisitor(dataSet.Function);
}

class main.Test_Visitor #back:salmon 
{
	java.lang.String packageName
	dataSet.DataList datalist
	dataSet.stateNode.StateNode stateNode
	void addDataList(org.eclipse.jdt.core.dom.CompilationUnit, dataSet.DataList);
	ArrayList<Statement> getStmtList(org.eclipse.jdt.core.dom.Statement);
	void typeDeclaration(org.eclipse.jdt.core.dom.AbstractTypeDeclaration);
	void fieldDeclaration(org.eclipse.jdt.core.dom.FieldDeclaration, dataSet.Data_base);
	Function makeFunction(org.eclipse.jdt.core.dom.MethodDeclaration, dataSet.Data_base);
	void methodDeclaration(org.eclipse.jdt.core.dom.MethodDeclaration, dataSet.Data_base);
	void stmtParsing(org.eclipse.jdt.core.dom.Statement, dataSet.Function);
	void returnStatement(org.eclipse.jdt.core.dom.Statement, dataSet.Function);
	void forStatement(org.eclipse.jdt.core.dom.Statement, dataSet.Function);
	void ifStatement(org.eclipse.jdt.core.dom.Statement, dataSet.Function);
	void expressionStatement(org.eclipse.jdt.core.dom.Statement, dataSet.Function);
	void assignment(org.eclipse.jdt.core.dom.Expression, dataSet.Function);
	void variableDeclarationStatement(org.eclipse.jdt.core.dom.Statement, dataSet.Function);
	void switchStatement(org.eclipse.jdt.core.dom.Statement, dataSet.Function);
}

class java.util.Scanner #line:green 
{
	null nextLine();
}

class java.util.ArrayList #line:green 
{
	null add(E);
	null size();
	null get(int);
}

class org.eclipse.jdt.core.JavaCore #line:green 
{
	null getOptions();
	null setComplianceOptions(java.lang.String, java.util.Map);
}

class org.eclipse.jdt.core.dom.Name #line:green 
{
	null getFullyQualifiedName();
}

class org.eclipse.jdt.core.dom.Block #line:green 
{
	null statements();
}

class org.eclipse.jdt.core.dom.ASTNode #line:green 
{
	null toString();
}

class org.eclipse.jdt.core.dom.TypeDeclaration #line:green 
{
	null getMethods();
	null getFields();
}

class org.eclipse.jdt.core.dom.FieldDeclaration #line:green 
{
	null getType();
}

class org.eclipse.jdt.core.dom.SimpleName #line:green 
{
	null getIdentifier();
}

class org.eclipse.jdt.core.dom.VariableDeclaration #line:green 
{
	null getInitializer();
}

class org.eclipse.jdt.core.dom.MethodDeclaration #line:green 
{
	null parameters();
	null getReturnType2();
	null getBody();
}

class org.eclipse.jdt.core.dom.ForStatement #line:green 
{
	null getExpression();
	null initializers();
	null updaters();
}

class org.eclipse.jdt.core.dom.ExpressionStatement #line:green 
{
	null getExpression();
}

class org.eclipse.jdt.core.dom.VariableDeclarationStatement #line:green 
{
	null fragments();
	null getType();
}

/'Class Define (클래스 정의) end'/

/'do Extends Define (상속 관계 정의)'/
	dataSet.Class--|>dataSet.Data_base: Class is Data_base
	dataSet.Function--|>dataSet.Data_base: Function is Data_base
	dataSet.Member--|>dataSet.Data_base: Member is Data_base
	dataSet.stateNode.ForStateNode--|>dataSet.stateNode.StateNode: ForStateNode is StateNode
	dataSet.stateNode.SwitchNode--|>dataSet.stateNode.StateNode: SwitchNode is StateNode
	dataSet.stateNode.VarDecNode--|>dataSet.stateNode.StateNode: VarDecNode is StateNode
	main.MethodVisitor--|>main.Test_Visitor: MethodVisitor is Test_Visitor
/'Extends Define (상속 관계 정의) end'/

/'do Has Relation Define (집합 관계 정의)'/
	complexity.Complex o-- java.lang.StringBuilder :Complex has StringBuilder
	complexity.Complex o-- java.lang.StringBuilder :Complex has StringBuilder
	dataSet.Class *-- dataSet.Class :Class has(Composition) Class
	dataSet.Class o-- dataSet.Class :Class has Class
	dataSet.Class o-- complexity.Complex :Class has Complex
	dataSet.Class *-- complexity.Complex :Class has(Composition) Complex
	dataSet.Data_base o-- dataSet.DataList :Data_base has DataList
	dataSet.Function *-- dataSet.stateNode.StateNode :Function has(Composition) StateNode
	dataSet.Function *-- dataSet.stateNode.StateNode :Function has(Composition) StateNode
	dataSet.Function o-- dataSet.stateNode.StateNode :Function has StateNode
	dataSet.Function o-- dataSet.stateNode.StateNode :Function has StateNode
	dataSet.Function *-- complexity.Complex :Function has(Composition) Complex
	dataSet.Function o-- complexity.Complex :Function has Complex
	dataSet.stateNode.StateNode *-- dataSet.stateNode.StateNode :StateNode has(Composition) StateNode
	dataSet.stateNode.StateNode *-- dataSet.stateNode.StateNode :StateNode has(Composition) StateNode
	dataSet.stateNode.StateNode o-- dataSet.stateNode.StateNode :StateNode has StateNode
	dataSet.stateNode.StateNode o-- dataSet.stateNode.StateNode :StateNode has StateNode
	dataSet.stateNode.ForStateNode *-- dataSet.stateNode.StateNode :ForStateNode has(Composition) StateNode
	dataSet.stateNode.ForStateNode *-- dataSet.stateNode.StateNode :ForStateNode has(Composition) StateNode
	dataSet.stateNode.ForStateNode o-- dataSet.stateNode.StateNode :ForStateNode has StateNode
	dataSet.stateNode.ForStateNode o-- dataSet.stateNode.StateNode :ForStateNode has StateNode
	diagram.ForEx o-- java.lang.StringBuilder :ForEx has StringBuilder
	diagram.ForEx o-- java.lang.StringBuilder :ForEx has StringBuilder
	diagram.NodeClassDg o-- java.lang.StringBuilder :NodeClassDg has StringBuilder
	diagram.NodeClassDg o-- java.lang.StringBuilder :NodeClassDg has StringBuilder
	hongik.selab.parser.java.JavaParser o-- java.io.File :JavaParser has File
	main.Test_Visitor o-- dataSet.DataList :Test_Visitor has DataList
	main.Test_Visitor *-- dataSet.stateNode.StateNode :Test_Visitor has(Composition) StateNode
	main.Test_Visitor *-- dataSet.stateNode.StateNode :Test_Visitor has(Composition) StateNode
	main.Test_Visitor *-- dataSet.stateNode.StateNode :Test_Visitor has(Composition) StateNode
	main.Test_Visitor *-- dataSet.stateNode.StateNode :Test_Visitor has(Composition) StateNode
/'end Has Relation Define (집합 관계 정의)'/

/'do call By Define-Class (클래스-클래스 호출 관계 정의)'/
	complexity.Complex --> dataSet.Function : Complex use Function
	complexity.Complex --> dataSet.Class : Complex use Class
	complexity.Complex --> dataSet.Data_base : Complex use Data_base
	complexity.Complex --> dataSet.DataList : Complex use DataList
	complexity.Complex --> java.util.Scanner : Complex use Scanner
	dataSet.Class --> dataSet.Data_base : Class use Data_base
	dataSet.Class --> dataSet.DataList : Class use DataList
	dataSet.DataList --> dataSet.Data_base : DataList use Data_base
	dataSet.DataList --> dataSet.Class : DataList use Class
	dataSet.Function --> dataSet.Class : Function use Class
	dataSet.Function --> dataSet.DataList : Function use DataList
	dataSet.Member --> dataSet.Class : Member use Class
	dataSet.Member --> dataSet.DataList : Member use DataList
	dataSet.Member --> java.util.ArrayList : Member use ArrayList
	dataSet.stateNode.ForStateNode --> org.eclipse.jdt.core.dom.ForStatement : ForStateNode use ForStatement
	dataSet.stateNode.ForStateNode --> java.util.ArrayList : ForStateNode use ArrayList
	dataSet.stateNode.SwitchNode --> org.eclipse.jdt.core.dom.SwitchStatement : SwitchNode use SwitchStatement
	diagram.ForEx --> dataSet.DataList : ForEx use DataList
	diagram.ForEx --> dataSet.Class : ForEx use Class
	diagram.ForEx --> dataSet.Function : ForEx use Function
	diagram.ForEx --> dataSet.Data_base : ForEx use Data_base
	diagram.ForEx --> dataSet.stateNode.StateNode : ForEx use StateNode
	diagram.ForEx --> complexity.Complex : ForEx use Complex
	diagram.ForEx --> java.util.ArrayList : ForEx use ArrayList
	diagram.ForEx --> dataSet.stateNode.SwitchNode : ForEx use SwitchNode
	diagram.ForQuiz4 --> dataSet.DataList : ForQuiz4 use DataList
	diagram.ForQuiz4 --> dataSet.Class : ForQuiz4 use Class
	diagram.ForQuiz4 --> dataSet.stateNode.StateNode : ForQuiz4 use StateNode
	diagram.ForQuiz4 --> java.util.ArrayList : ForQuiz4 use ArrayList
	diagram.NodeClassDg --> dataSet.Function : NodeClassDg use Function
	diagram.NodeClassDg --> dataSet.stateNode.StateNode : NodeClassDg use StateNode
	diagram.NodeClassDg --> java.util.ArrayList : NodeClassDg use ArrayList
	diagram.NodeClassDg --> dataSet.stateNode.SwitchNode : NodeClassDg use SwitchNode
	hongik.selab.parser.java.JavaParser --> java.util.ArrayList : JavaParser use ArrayList
	hongik.selab.parser.java.JavaParser --> org.eclipse.jdt.core.JavaCore : JavaParser use JavaCore
	main.DataListDiagram --> dataSet.DataList : DataListDiagram use DataList
	main.DataListDiagram --> dataSet.Data_base : DataListDiagram use Data_base
	main.DataListDiagram --> dataSet.Function : DataListDiagram use Function
	main.DataListDiagram --> dataSet.Class : DataListDiagram use Class
	main.Main --> hongik.selab.parser.java.JavaParser : Main use JavaParser
	main.Main --> dataSet.DataList : Main use DataList
	main.Main --> diagram.ForEx : Main use ForEx
	main.MethodVisitor --> dataSet.Function : MethodVisitor use Function
	main.Test_Visitor --> org.eclipse.jdt.core.dom.CompilationUnit : Test_Visitor use CompilationUnit
	main.Test_Visitor --> org.eclipse.jdt.core.dom.Statement : Test_Visitor use Statement
	main.Test_Visitor --> org.eclipse.jdt.core.dom.AbstractTypeDeclaration : Test_Visitor use AbstractTypeDeclaration
	main.Test_Visitor --> org.eclipse.jdt.core.dom.FieldDeclaration : Test_Visitor use FieldDeclaration
	main.Test_Visitor --> dataSet.Data_base : Test_Visitor use Data_base
	main.Test_Visitor --> org.eclipse.jdt.core.dom.MethodDeclaration : Test_Visitor use MethodDeclaration
	main.Test_Visitor --> dataSet.Function : Test_Visitor use Function
	main.Test_Visitor --> org.eclipse.jdt.core.dom.Expression : Test_Visitor use Expression
	main.Test_Visitor --> org.eclipse.jdt.core.dom.Name : Test_Visitor use Name
	main.Test_Visitor --> java.util.null : Test_Visitor use null
	main.Test_Visitor --> org.eclipse.jdt.core.dom.Block : Test_Visitor use Block
	main.Test_Visitor --> java.util.ArrayList : Test_Visitor use ArrayList
	main.Test_Visitor --> org.eclipse.jdt.core.dom.ASTNode : Test_Visitor use ASTNode
	main.Test_Visitor --> dataSet.Class : Test_Visitor use Class
	main.Test_Visitor --> org.eclipse.jdt.core.dom.TypeDeclaration : Test_Visitor use TypeDeclaration
	main.Test_Visitor --> org.eclipse.jdt.core.dom.SimpleName : Test_Visitor use SimpleName
	main.Test_Visitor --> dataSet.Member : Test_Visitor use Member
	main.Test_Visitor --> org.eclipse.jdt.core.dom.VariableDeclaration : Test_Visitor use VariableDeclaration
	main.Test_Visitor --> dataSet.stateNode.ForStateNode : Test_Visitor use ForStateNode
	main.Test_Visitor --> org.eclipse.jdt.core.dom.ForStatement : Test_Visitor use ForStatement
	main.Test_Visitor --> org.eclipse.jdt.core.dom.ExpressionStatement : Test_Visitor use ExpressionStatement
	main.Test_Visitor --> org.eclipse.jdt.core.dom.VariableDeclarationStatement : Test_Visitor use VariableDeclarationStatement
	main.Test_Visitor --> dataSet.stateNode.VarDecNode : Test_Visitor use VarDecNode
	main.Test_Visitor --> dataSet.stateNode.SwitchNode : Test_Visitor use SwitchNode


/'call By Define-Class (클래스-클래스 호출 관계 정의)' end/


@enduml